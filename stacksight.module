<?php

require_once('stacksight-php-sdk/SSUtilities.php');
require_once('stacksight-php-sdk/SSHttpRequest.php');
require_once('stacksight-php-sdk/SSClientBase.php');
require_once('stacksight-php-sdk/SSEventsMessageMapping.php');
require_once('stacksight-php-sdk/platforms/SSDrupalClient.php');

function stacksight_admin() {
	drupal_add_css(drupal_get_path('module', 'stacksight').'/css/ss-admin.css');

	$form = array();

	$form['stacksight_app'] = array(
		'#type' => 'textfield',
		'#title' => t('App'),
		'#default_value' => variable_get('stacksight_app', ''),
		'#size' => 64,
		'#maxlength' => 64,
		'#description' => t("An app name within mean network"),
		'#required' => TRUE,
	);

	$form['stacksight_token'] = array(
		'#type' => 'textfield',
		'#title' => t('Access Token'),
		'#default_value' => variable_get('stacksight_token', ''),
		'#size' => 64,
		'#maxlength' => 64,
		'#description' => t("An access token given by mean network"),
		'#required' => TRUE,
	);
	$form['#submit'][] = 'stacksight_admin_submit';

	$app_stored = variable_get('stacksight');
	if ($app_stored) {
		$form['code'] = array(
			'#markup' => theme('code_config', array('data' => array(
				'_id' => $app_stored['_id'], 
				'token' => $app_stored['token'], 
				'module_path' => drupal_get_path('module', 'stacksight'),
				'diagnostic' => stacksight_get_diagnostic($app_stored)
			)))
		);
	}

	return system_settings_form($form);
}

function stacksight_menu() {
	$items = array();

	$items['admin/config/development/stacksight'] = array(
		'title' => 'StackSight',
		'description' => 'StackSight integration module settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('stacksight_admin'),
		'access arguments' => array('administer stacksight settings'),
		'weight' => -5,
	);

	return $items;
}

function stacksight_permission() {
	return array(
		'administer stacksight settings' => array(
			'title' => t('Administer StackSight settings')
		),
	);
}

function stacksight_admin_submit($form, &$form_state) {
	$app_name = $form_state['values']['stacksight_app'];
	$token = $form_state['values']['stacksight_token'];

	$ss_client = new SSDrupalClient($token, 'drupal');
	$result = $ss_client->createApp($app_name);

	if ($result['success']) {
		if ($result['new']) drupal_set_message('The app "'.$result['data']['name'].'" created successfully');
	} else drupal_set_message($result['message'], 'error');
}

function stacksight_watchdog($log) {
	global $ss_client;

	$res = array();
	$app_name = variable_get('stacksight_app');
	$token = variable_get('stacksight_token');
	// exclude certain events
	$exclude = array('content');
	$message = strip_tags(t($log['message'], $log['variables']));
	// SSUtilities::error_log($log);

	if ($log['type'] == 'php') {
		$severity = stacksight_map_severity_level($log['severity']);
		$res = $ss_client->sendLog($message, $severity);
	} elseif (!in_array($log['type'], $exclude)) {
		$event_data = SSEventsMessageMapping::composeEventData(array(
			'object_type' => $log['type']
		), $message);
		$res = $ss_client->publishEvent($event_data);
	}

	if ($res && !$res['success']) SSUtilities::error_log($res['message'], 'error');
}

function stacksight_map_severity_level($drupal_sev_level) {
	$level = '';

	switch ($drupal_sev_level) {
		case WATCHDOG_ERROR:
			$level = 'error';
			break;

		case WATCHDOG_WARNING:
			$level = 'warn';
			break;

		case WATCHDOG_NOTICE:
			$level = 'info';
			break;
		
		case WATCHDOG_DEBUG:
			$level = 'log';
			break;
	}

	return $level;
}

function stacksight_theme() {
	return array(
		'code_config' => array(
			'variables' => array(
				'data' => NULL
			),
			'template' => 'code_config',
		),
	);
}

function stacksight_get_diagnostic($app) {
    $list = array();

    if (!defined('STACKSIGHT_APP_ID')) {
        $list[] = t("App Id is not defined");
    } elseif (STACKSIGHT_APP_ID != $app['_id']) {
        $list[] = t("App Ids do not match");
    }

    if (!defined('STACKSIGHT_TOKEN')) {
        $list[] = t("Token is not defined<br>");
    } elseif(STACKSIGHT_TOKEN != $app['token']) {
        $list[] = t("Tokens do not match<br>"); 
    }

    if (!defined('STACKSIGHT_BOOTSTRAPED')) {
        $list[] = t("bootstrap-drupal.php is not included in settings.php<br>");
    }

    return $list;
}

function stacksight_get_availible_updates() {
	module_load_include('inc', 'update', 'update.report');
	$available = update_get_available(TRUE);
	$updates = update_calculate_project_data($available);
	echo '<pre>'.print_r($updates, true).'</pre>';
}

function stacksight_node_update($node) {
	global $ss_client;

	if (empty($node)) return;

	$event_data = SSEventsMessageMapping::composeEventData(array(
		'action' => 'updated',
		'object_type' => 'content',
		'object_subtype' => $node->type,
		'object_id' => $node->nid,
		'object_name' => $node->title
	));
	$res = $ss_client->publishEvent($event_data);
}

function stacksight_node_insert($node) {
	global $ss_client;

	if (empty($node)) return;

	$event_data = SSEventsMessageMapping::composeEventData(array(
		'action' => 'created',
		'object_type' => 'content',
		'object_subtype' => $node->type,
		'object_id' => $node->nid,
		'object_name' => $node->title
	));
	$res = $ss_client->publishEvent($event_data);
}

function stacksight_node_delete($node) {
	global $ss_client;

	if (empty($node)) return;

	$event_data = SSEventsMessageMapping::composeEventData(array(
		'action' => 'deleted',
		'object_type' => 'content',
		'object_subtype' => $node->type,
		'object_id' => $node->nid,
		'object_name' => $node->title
	));
	$res = $ss_client->publishEvent($event_data);
}

// user
function stacksight_user_insert(&$edit, $account, $category) {
	// SSUtilities::error_log('-------------User added----------------');
	// SSUtilities::error_log($account);
}

function stacksight_user_update(&$edit, $account, $category) {
	// $account contain additional info for events, such as:
	// picture_delete - if user checked to delete avatar
	// picture_upload - if your chose a file to upload
	// user status - blocked - active
  // SSUtilities::error_log('-------------User updated----------------');
  // SSUtilities::error_log($account);
}

function stacksight_user_delete($account) {
	// SSUtilities::error_log('-------------User will be deleted----------------');
  	// SSUtilities::error_log($account);
}

function stacksight_user_login(&$edit, $account) {
	// SSUtilities::error_log('-------------User logged in----------------');
	// SSUtilities::error_log($account);
}

function stacksight_user_logout($account) {
	// SSUtilities::error_log('-------------User logged out----------------');
  	// SSUtilities::error_log($account);
}

// files
function stacksight_file_presave($file) {
	// required that condition cause this hook is called 3 times with different parameters
	if (!isset($file->original) || !$file->status) return;

	$level = 'file_hooks';
	// SSUtilities::error_log('-------------file presave----------------', $level);
	// SSUtilities::error_log($file, $level);
	// SSUtilities::error_log('-------------file object----------------', $level);
	// SSUtilities::error_log(file_create_url($file->uri), $level);


  // Add a message to the log, if the file is a jpg
  /*$validate = file_validate_extensions($file, 'jpg');
  if (empty($validate)) {
    watchdog('file', 'A jpg has been added.');
  }*/
}

function stacksight_file_delete($file) {
	$level = 'file_hooks';
	// SSUtilities::error_log('-------------file is being deleted----------------', $level);
	// SSUtilities::error_log($file, $level);
}


// comments
function stacksight_comment_delete($comment) {
	$level = 'comments_hooks';
	// SSUtilities::error_log('-------------comment is being deleted----------------', $level);
	// SSUtilities::error_log($comment, $level);
}

function stacksight_comment_insert($comment) {
	$level = 'comments_hooks';
	// SSUtilities::error_log('-------------comment is being inserted----------------', $level);
	// SSUtilities::error_log($comment, $level);
}

function stacksight_comment_update($comment) {
	$level = 'comments_hooks';
	// SSUtilities::error_log('-------------comment is being updated----------------', $level);
	// SSUtilities::error_log($comment, $level);

	// unpublished
	if (isset($comment->original) && $comment->status == COMMENT_NOT_PUBLISHED && $comment->original->status == COMMENT_PUBLISHED) {
		// SSUtilities::error_log('-------------comment is being unpublished----------------', $level);
	}
}

function stacksight_comment_publish($comment) {
	$level = 'comments_hooks';
	// SSUtilities::error_log('-------------comment is being published----------------', $level);
	// SSUtilities::error_log($comment, $level);
}